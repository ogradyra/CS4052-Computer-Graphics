#version 330

out vec4 FragColor;

in vec2 TexCoord;
in vec3 tnorm;
in vec3 vertex_inWorldSpace;

struct Material{
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	float shininess;
};

uniform Material spider;
uniform Material fire;

uniform vec3 spider_color;
uniform vec3 light_position;

uniform vec3 fire_position;
uniform vec3 fire_color;

uniform vec3 view_position;

uniform int tex_num;
uniform sampler2D spider_tex1;
uniform sampler2D spider_tex2;

vec3 view_dir;
vec4 moon_light;
vec4 fire_light;
vec4 texel;

vec4 set_lighting (Material obj, vec3 obj_color){

	vec4 frag_color;

	// ambient
	float ambientStrength = 0.1;
	vec3 ambient = ambientStrength * obj.ambient;

	// diffuse
	vec3 norm = normalize(tnorm);
	vec3 light_dir = normalize(light_position - vertex_inWorldSpace);
	float diff = max(dot(norm, light_dir), 0.0);
	vec3 diffuse = diff * obj.diffuse;

	// specular
	float specularStrength = 1;
	view_dir = normalize(view_position - vertex_inWorldSpace);

	// blinn - phong
	vec3 halfwayDir = normalize(light_dir + view_dir);
	float spec = pow(max(dot(norm, halfwayDir), 0.0), obj.shininess);

	// phong
	//vec3 reflect_dir = normalize(reflect(light_dir, tnorm));
	//float spec_dot = max(dot(view_dir, reflect_dir), 0.0);
	//float spec = pow(spec_dot, obj.shininess);
	
	vec3 specular = spec * specularStrength * obj.specular;

	vec3 result = (specular + diffuse + ambient) * obj_color;
	frag_color = vec4(result, 1.0);

	return frag_color;
}

void main(){	
	
	if (tex_num == 6){
		texel = texture(spider_tex1, TexCoord);
	}

	else {
		texel = texture(spider_tex2, TexCoord);
	}

	moon_light = set_lighting(spider, spider_color);
	fire_light = set_lighting(fire, fire_color);

	FragColor = texel * (moon_light + fire_light);
	// (moon_light + fire_light);
}